function fig_force_freq
% Makes force-freq figures

% Variables
sim_dir = '../simulations/a/living/sim_data/force_freq/sim_output';
n_cond = 3;

output_file_string = '../output/fig_freq';
output_file_string_traces = '../output/fig_freq_traces';
output_types = {'png', 'eps', 'svg'};

f_scaling_factor = 0.001;
y_label_offset = -0.45;
y_freq_label_offset = -0.3;
x_label_offset = -0.3;
t_ticks = [0 1.3];
f_ticks = [0 80]

y_ticks = [0 5 ; f_ticks ; 0 1 ; 0 1];
y_tick_dp = [1 0 1 1]

marker_size = 6;
marker_symbols = {'o','d','s'};
marker_edge_colors = zeros(3,3);
marker_face_colors = [0 0.7 0 ; 0.3 0.3 0.3 ; 0.7 0 0];

sim_line_width = 1.2;

leg_strings = {'Control', 'Crit', 'Crit+drug'};

y_label_strings = {{'[Ca^{2+}]', '(ÂµM)'}, ...
                    {'Force', 'normalized to', 'area', '(kN m^{-2})'}, ...
                    {'Thin', 'filament'}, ...
                    {'Thick', 'filament'}};

thin_strings = {'Inactive', 'Active'};
thick_strings = {'SRX', 'DRX', 'Attached'};

state_hex_colors = ['#1f77b4' ; '#ff7f0e' ; '#8c564b'];
state_colors = hex2rgb(state_hex_colors)


% Make the figure
figure(1);
clf

n_cols = 3;
n_rows = 4;

sp = initialise_publication_quality_figure( ...
        'no_of_panels_wide', n_cols, ...
        'no_of_panels_high', n_rows, ...
        'right_margin', 0.5, ...
        'left_pads', repmat([1.2, 0.2, 0.2], [1 n_rows]), ...
        'right_pads', repmat([0.2 0.2 1.2], [1 n_rows]), ...
        'individual_padding', 1, ...
        'axes_padding_top', 0.1, ...
        'axes_padding_bottom', 0.2, ...
        'top_margin', 0.2, ...
        'bottom_margin', 0.35, ...
        'x_to_y_axes_ratio', 2, ...
        'panel_label_font_size', 0);

% Cycle through data folders
for i = 1 : n_cond
    cond_dir = fullfile(sim_dir, sprintf('%i', i));
    cond_files = findfiles('txt', cond_dir, 0)';

    % Cut out the rates file
    cond_files(startsWith(cond_files,'rates')) = [];

    for j = 1 : numel(cond_files)
        d = readtable(cond_files{j});

        Ca_uM = 1e6 * 10.^(-d.pCa);
        [pks,locs] = findpeaks(Ca_uM);
        loc_times = d.time(locs);
        if (numel(locs)>1)
            freq(i,j) = 1/(loc_times(2)-loc_times(1));
        else
            if (loc_times < 0.3)
                freq(i,j) = 0;
            else
                freq(i,j) = 100;
            end
        end

        if ((freq(i,j) > 0) && (freq(i,j) < 4))
            freq(i,j) = NaN;
            continue;
        end

        plot_index = i;
        subplot(sp(plot_index));
        hold on;
        plot(d.time, Ca_uM, 'k-', ...
                'LineWidth', sim_line_width);

        plot_index = plot_index + n_cols;
        subplot(sp(plot_index));
        hold on;
        f = f_scaling_factor * d.force;
        plot(d.time, f, '-', ...
            'Color', marker_face_colors(i,:), ...
                'LineWidth', sim_line_width);

        peak_force(i,j) = max(f);

        plot_index = plot_index + n_cols;
        subplot(sp(plot_index));
        hold on;
        for k = 1 : 2
            field_string = sprintf('a_pop_%i', k-1);
            h_a(k) = plot(d.time, d.(field_string), '-', ...
                'Color', state_colors(k,:), ...
                'LineWidth', sim_line_width);
        end

        plot_index = plot_index + n_cols;
        subplot(sp(plot_index));
        hold on;
        for k = 1 : 3
            field_string = sprintf('m_pop_%i', k-1);
            h_m(k) = plot(d.time, d.(field_string), '-', ...
                'Color', state_colors(k,:), ...
                'LineWidth', sim_line_width);
        end

    end
end

% Labels
for i = 1 : n_cols
    for j = 1 : n_rows
        plot_index = i + (j-1) * n_cols;

        if (j==1)
            title_string = leg_strings{i};
        else
            title_string = '';
        end
        
        subplot(sp(plot_index));
        improve_axes( ...
            'x_ticks', t_ticks, ...
            'x_axis_off', ~isequal(j, n_rows), ...
            'x_tick_decimal_places', 1, ...
            'x_axis_label', 'Time (s)', ...
            'y_ticks', y_ticks(j,:), ...
            'y_axis_off', ~isequal(i,1), ...
            'y_tick_decimal_places', y_tick_dp(j), ...
            'y_axis_label', y_label_strings{j}, ...
            'y_label_offset', y_label_offset, ...
            'title', title_string);
    end
end

subplot(sp(9))
legendflex(h_a, thin_strings, ...
    'xscale', 0.5, ...
    'FontSize', 8, ...
    'padding', [2 2 2], ...
    'anchor', {'se', 'sw'}, ...
    'buffer', [10, 5]);

subplot(sp(12))
legendflex(h_m, thick_strings, ...
    'xscale', 0.5, ...
    'FontSize', 8, ...
    'padding', [2 2 2], ...
    'anchor', {'se', 'sw'}, ...
    'buffer', [10, 5]);

for i = 1 : numel(output_types)
    figure_export('output_file_string', output_file_string_traces, ...
        'output_type', output_types{i});
end


figure(2);
sp = initialise_publication_quality_figure( ...
        'no_of_panels_wide', 1, ...
        'no_of_panels_high', 1, ...
        'axes_padding_left', 1.2, ...
        'x_to_y_axes_ratio', 1.5, ...
        'panel_label_font_size', 0, ...
        'bottom_margin', 0);

% Sort by frequency
[~,si] = sort(freq(i,:));
freq = freq(:, si);
peak_force = peak_force(:, si);

for i = 1 : n_cond
    subplot(sp(1))
    hold on;
    h(i) = plot(freq(i,:), peak_force(i,:), ...
            ['-' marker_symbols{i}], ...
            'MarkerFaceColor', 'none', ...
            'MarkerEdgeColor', marker_face_colors(i,:), ...
            'Color', marker_face_colors(i,:), ...
            'MarkerSize', marker_size);
end

subplot(sp(1))
legendflex(h, leg_strings, ...
    'xscale', 0.5, ...
    'FontSize', 8, ...
    'padding', [2 2 2], ...
    'anchor', {'se', 'se'}, ...
    'buffer', [0, 15]);

improve_axes( ...
    'axis_handle', sp(1), ...
    'x_axis_offset', 0, ...
    'y_axis_offset', 0, ...
    'x_ticks', 0:20:100, ...
    'x_tick_decimal_places', 0, ...
    'x_axis_label', {'Stimulation frequency (Hz)'}, ...    
    'x_label_offset', x_label_offset, ...
    'y_axis_label', {'Force','normalized','to area','(kN m^{-2})'}, ...
    'y_label_offset', y_freq_label_offset, ...
    'y_ticks', f_ticks, ...
    'y_tick_decimal_places', 0);

for i = 1 : numel(output_types)
    figure_export('output_file_string', output_file_string, ...
        'output_type', output_types{i});
end